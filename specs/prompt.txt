<instructions>
1. Fix the following code so the cli supports the following commands:
```
mp init <project> <options>      # Create new project with default config
mp status <project>     # Display project status and validate project configuration
mp scrape <project>     # Run scrape job
mp clean <project>      # Run cleaning job
mp stage <project>      # Stage documents for generation
mp create <project> <job> <options> # Create new generation job 
mp generate <project> <job>  # Run generation job

create options
--prompt # Generation prompt template
--model # LiteLLM model identifier
--max-tokens # Maximum tokens for generation
--temperature # Temperature for generation
```
2. Fix the code so it outputs the help screen with all agrgumets and options
</instructions>

<code>
from pathlib import Path
import click
import sys
from typing import Optional

from meta_prompter.core.project import Project, GenerationJobConfig
from meta_prompter.scrapers.parallel import ParallelScraper
from meta_prompter.utils.logging import setup_logging

# Configure logging
setup_logging(log_file=Path("logs/metaprompter.log"))

class ProjectPath(click.Path):
    """Custom path type that loads and validates project files."""
    def convert(self, value, param, ctx):
        path = super().convert(value, param, ctx)
        if path is None:
            return None
        try:
            project = Project.from_yaml(Path(path))
            return project
        except Exception as e:
            self.fail(f'Failed to load project: {str(e)}', param, ctx)

def get_project_path(project_name: str) -> Path:
    """Get the path to a project's YAML file."""
    return Path(f"{project_name}.yaml")

@click.group(invoke_without_command=True)
@click.pass_context
def cli(ctx):
    """MetaPrompter - AI documentation context manager.
    """
    if ctx.invoked_subcommand is None:
        click.echo(ctx.get_help())
        ctx.exit()

def create_project_structure(project_name: str) -> Path:
    """Create project directory structure."""
    project_dir = Path(project_name)
    
    # Create project directory
    if project_dir.exists():
        click.echo(f"Error: Directory {project_name} already exists", err=True)
        sys.exit(1)
    
    # Create directory structure
    directories = [
        "scraped",
        "cleaned",
        "staged",
        "meta_prompts"
    ]
    
    project_dir.mkdir()
    for dir_name in directories:
        (project_dir / dir_name).mkdir()
        
    # Create empty database
    (project_dir / "project.db").touch()
    
    return project_dir

@cli.command()
@click.argument('project')
def init(project: str):
    """Create a new project with default configuration."""
    # Create project directory structure
    project_dir = create_project_structure(project)
    project_path = project_dir / "project.yaml"
    
    # Create default project
    project_config = Project(
        name=project,
        description="New MetaPrompter project",
        path=project_dir,
        scrape_job={
            "seed_urls": [],
            "max_pages": 5,
            "spider_options": {
                "follow_links": True,
                "restrict_domain": True,
                "restrict_path": True,
                "max_depth": 5,
                "exclusion_patterns": []
            }
        },
        cleaning={
            "prompt": "Clean and format the following content. Remove any navigation elements or other web-specific artifacts. Ensure the content is formatted consistently across different documentation sources.",
            "max_docs": 5,
            "model": "gemini/gemini-1.5-flash",
            "max_tokens": 128000,
            "temperature": 0.1
        }
    )
    
    # Save project file
    project_config.to_yaml(project_path)
    click.echo(f"Created new project: {project_dir}")
    click.echo("\nEdit project.yaml to configure your workflow")

@cli.command()
@click.argument('project', type=ProjectPath())
def status(project: Project):
    """Show project status and configuration."""
    click.echo(f"Project: {project.name}")
    click.echo(f"Description: {project.description}")
    click.echo(f"Created: {project.created}")
    click.echo("\nConfiguration:")
    click.echo("  Scraping:")
    click.echo(f"    Max Pages: {project.scrape_job.max_pages}")
    click.echo(f"    Max Depth: {project.scrape_job.spider_options.max_depth}")
    if project.scrape_job.seed_urls:
        click.echo("    Seed URLs:")
        for url in project.scrape_job.seed_urls:
            click.echo(f"      - {url}")
    
    click.echo("\n  Cleaning:")
    click.echo(f"    Max Docs: {project.cleaning.max_docs}")
    click.echo(f"    Model: {project.cleaning.model}")
    click.echo(f"    Max Tokens: {project.cleaning.max_tokens}")
    click.echo(f"    Temperature: {project.cleaning.temperature}")
    
    if project.generation_jobs:
        click.echo("\n  Generation Jobs:")
        for name, job in project.generation_jobs.items():
            click.echo(f"    {name}:")
            click.echo(f"      Model: {job.model}")
            click.echo(f"      Max Tokens: {job.max_tokens}")
            click.echo(f"      Temperature: {job.temperature}")

@cli.command()
@click.argument('project', type=ProjectPath())
def scrape(project: Project):
    """Run scrape job with current configuration."""
    if not project.scrape_job.seed_urls:
        click.echo("Error: No seed URLs configured", err=True)
        sys.exit(1)
        
    click.echo(f"Starting scrape job for {project.name}")
    click.echo(f"Max pages: {project.scrape_job.max_pages}")
    
    scraper = ParallelScraper(
        max_workers=3,
        output_dir=Path(project.scrape_job.output_dir)
    )
    
    try:
        scraper.scrape(project.scrape_job)
        project.to_yaml(get_project_path(project.name))
        click.echo("Scraping completed successfully")
    except Exception as e:
        click.echo(f"Scraping failed: {str(e)}", err=True)
        sys.exit(1)

@cli.command()
@click.argument('project', type=ProjectPath())
def clean(project: Project):
    """Run cleaning job with current configuration."""
    if not project.scrape_job.seed_urls:
        click.echo("Error: Scraping phase not complete", err=True)
        sys.exit(1)
        
    click.echo(f"Starting cleaning job for {project.name}")
    click.echo(f"Max docs: {project.cleaning.max_docs}")
    # TODO: Implement cleaning logic
    click.echo("Cleaning completed successfully")
    
    project.to_yaml(get_project_path(project.name))

@cli.command()
@click.argument('project', type=ProjectPath())
@click.argument('source', type=click.Choice(['scraped', 'cleaned']))
def stage(project: Project, source: str):
    """Stage documents for generation from either scraped or cleaned directory."""
    try:
        count = project.stage_documents(source)
        click.echo(f"Successfully staged {count} documents from {source} directory")
    except ValueError as e:
        click.echo(f"Error: {str(e)}", err=True)
        sys.exit(1)

@cli.command()
@click.argument('project', type=ProjectPath())
@click.argument('job')
@click.option('--prompt', help='Generation prompt template')
@click.option('--model', help='LiteLLM model identifier')
@click.option('--max-tokens', type=int, help='Maximum tokens for generation')
@click.option('--temperature', type=float, help='Temperature for generation')
def create(project: Project, job: str, prompt: Optional[str] = None, 
          model: Optional[str] = None, max_tokens: Optional[int] = None,
          temperature: Optional[float] = None):
    """Create a new generation job configuration."""
    try:
        message = project.add_generation_job(
            job_name=job,
            prompt=prompt,
            model=model,
            max_tokens=max_tokens,
            temperature=temperature
        )
        project.to_yaml(get_project_path(project.name))
        click.echo(message)
    except ValueError as e:
        click.echo(f"Error: {str(e)}", err=True)
        sys.exit(1)

@cli.command()
@click.argument('project', type=ProjectPath())
@click.argument('job')
def generate(project: Project, job: str):
    """Run a generation job."""
    if job not in project.generation_jobs:
        click.echo(f"Error: Generation job {job} not found", err=True)
        sys.exit(1)
        
    click.echo(f"Starting generation job: {job}")
    # TODO: Implement generation logic
    click.echo("Generation completed successfully")

def main():
    cli()

if __name__ == "__main__":
    main()
</code>